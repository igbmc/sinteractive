#!/bin/bash
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8
# Copyright (c) 2007 PÃ¤r Andersson (National Supercomputer Centre, Sweden),
# 2011 Joerg Bornschein <bornschein@fias.uni-frankfurt.de>,
# 2014-2016 Janne Blomqvist  <janne.blomqvist@aalto.fi>
#
# This will submit a batch script that starts screen on a node.
# Then ssh is used to connect to the node and attach the screen.
# The result is very similar to an interactive shell in PBS
# (qsub -I)

MYDIR="$(dirname "$(readlink -f ${BASH_SOURCE[0]})")"

# Batch Script that starts SCREEN
BS=$MYDIR/_interactive
# Interactive screen script
IS=$MYDIR/_interactive_screen

# Default partition (Change this to suit your site!)
# The user can specify another partition explicitly, sbatch will take
# the last one on the command line.
DEFAULTPART=interactive

# Submit the job and get the job id
JOB=$(sbatch --output=/dev/null --error=/dev/null -p $DEFAULTPART $@ $BS \
    | grep -E --line-buffered -o -e "\b[0-9]+$")
sbatch_status=$?
if [ $sbatch_status -ne 0 ];then
    exit $sbatch_status
fi

# Make sure the job is always canceled
trap "{ scancel --quiet $JOB; exit; }" SIGINT SIGTERM EXIT

echo "Waiting for JOBID $JOB to start"
while true;do
    sleep 1s

    # Check job status
    STATUS=$(squeue -j $JOB -t PD,R -h -o %t)

    if [ "$STATUS" = "R" ];then
	# Job is running, break the while loop
	break
    elif [ "$STATUS" != "PD" ];then
	echo "Job is not Running or Pending. Aborting"
	scancel $JOB
	exit 1
    fi

    echo -n "."

done

# Determine the first node in the job:
NODE=$(scontrol show job $JOB|perl -ne 'print "$1" if /BatchHost=(.+)\s/')

# SSH to the node and attach the screen
sleep 1s
ssh -o "StrictHostKeyChecking=no" -X -t $NODE $IS slurm$JOB
# The trap will now cancel the job before exiting.
